name: Backend CI/CD

on:
  push:
    branches: ["deploy"]
    paths:
      - "backend/**"
  pull_request:
    branches: ["deploy"]
    paths:
      - "backend/**"
  workflow_dispatch:

concurrency:
  group: backend-cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: self-hosted
    env:
      # Gateway env (create this secret or rename to yours)
      PRPPENU_GATEWAY_ENV: ${{ secrets.PRPPENU_GATEWAY_ENV }}
      # Service envs you already created
      PRPPENU_AUTH_ENV: ${{ secrets.PRPPENU_AUTH_ENV }}
      PRPPENU_PAYMENT_ENV: ${{ secrets.PRPPENU_PAYMENT_ENV }}
      PRPPENU_PROPERTY_ENV: ${{ secrets.PRPPENU_PROPERTY_ENV }}
      PRPPENU_USER_ENV: ${{ secrets.PRPPENU_USER_ENV }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/gateway/package-lock.json
            backend/services/*-service/package-lock.json

      - name: Show working dir (debug)
        run: |
          pwd
          ls -la

      # -------- Write .env files (from GitHub Secrets) --------
      - name: Write gateway .env
        if: ${{ env.PRPPENU_GATEWAY_ENV != '' }}
        working-directory: backend/gateway
        run: printf "%s" "${PRPPENU_GATEWAY_ENV}" > .env

      - name: Write service .env files
        run: |
          set -e
          # auth
          if [ -n "${PRPPENU_AUTH_ENV}" ]; then
            printf "%s" "${PRPPENU_AUTH_ENV}" > backend/services/auth-service/.env
          fi
          # payment
          if [ -n "${PRPPENU_PAYMENT_ENV}" ]; then
            printf "%s" "${PRPPENU_PAYMENT_ENV}" > backend/services/payment-service/.env
          fi
          # property
          if [ -n "${PRPPENU_PROPERTY_ENV}" ]; then
            printf "%s" "${PRPPENU_PROPERTY_ENV}" > backend/services/property-service/.env
          fi
          # user
          if [ -n "${PRPPENU_USER_ENV}" ]; then
            printf "%s" "${PRPPENU_USER_ENV}" > backend/services/user-service/.env
          fi

      # -------- Install & build (gateway) --------
      - name: Install gateway deps (with dev for build)
        working-directory: backend/gateway
        run: npm ci --no-audit --no-fund

      - name: Build gateway (if script exists)
        working-directory: backend/gateway
        run: |
          if npm run | grep -qE '(^|\s)build(\s|:)'; then
            npm run build
          else
            echo "No build script"
          fi

      - name: Prune gateway dev deps
        working-directory: backend/gateway
        run: npm prune --omit=dev

      # -------- Install & build (services) --------
      - name: Install service deps (with dev for build)
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            echo "Installing deps in $dir"
            (cd "$dir" && npm ci --no-audit --no-fund)
          done

      - name: Build services (if build script exists)
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            if (cd "$dir" && npm run | grep -qE '(^|\s)build(\s|:)'); then
              echo "Building $dir"
              (cd "$dir" && npm run build)
            else
              echo "No build script in $dir"
            fi
          done

      - name: Prune service dev deps
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            (cd "$dir" && npm prune --omit=dev)
          done

      # -------- Deploy: reload PM2 --------
      - name: Reload PM2 apps
        working-directory: backend
        run: |
          # ecosystem.config.cjs should define gateway + all services
          if pm2 -v >/dev/null 2>&1; then
            # Start or reload based on ecosystem file
            if [ -f ecosystem.config.cjs ]; then
              pm2 start ecosystem.config.cjs || true
              pm2 reload ecosystem.config.cjs
              pm2 save
              pm2 status
            else
              echo "Missing backend/ecosystem.config.cjs â€” please add it."
              exit 1
            fi
          else
            echo "PM2 not found on runner. Install with: npm i -g pm2"
            exit 1
          fi
