name: Backend CI/CD üöÄ

on:
  push:
    branches: ["deploy"]
    paths:
      - "backend/**"
      - "!frontend/**"
  pull_request:
    branches: ["deploy"]
    paths:
      - "backend/**"
  workflow_dispatch:

concurrency:
  group: backend-cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: self-hosted

    env:
      PRPPENU_GATEWAY_ENV: ${{ secrets.PRPPENU_GATEWAY_ENV }}
      PRPPENU_AUTH_ENV: ${{ secrets.PRPPENU_AUTH_ENV }}
      PRPPENU_PAYMENT_ENV: ${{ secrets.PRPPENU_PAYMENT_ENV }}
      PRPPENU_PROPERTY_ENV: ${{ secrets.PRPPENU_PROPERTY_ENV }}
      PRPPENU_USER_ENV: ${{ secrets.PRPPENU_USER_ENV }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # 1Ô∏è‚É£ Checkout Code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # 2Ô∏è‚É£ Setup Node
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: |
            backend/gateway/package-lock.json
            backend/services/*-service/package-lock.json

      # 3Ô∏è‚É£ Debug Info (workspace path)
      - name: Show runner workspace
        run: |
          echo "GITHUB_WORKSPACE = $GITHUB_WORKSPACE"
          pwd
          ls -la
          echo "Backend tree:"
          ls -la backend || true

      # 4Ô∏è‚É£ Check secrets exist
      - name: Check Secrets
        run: |
          check() { [ -n "$2" ] && echo "$1: ‚úÖ OK" || (echo "$1: ‚ùå MISSING"; exit 1); }
          check PRPPENU_GATEWAY_ENV "${PRPPENU_GATEWAY_ENV}"
          check PRPPENU_AUTH_ENV "${PRPPENU_AUTH_ENV}"
          check PRPPENU_PAYMENT_ENV "${PRPPENU_PAYMENT_ENV}"
          check PRPPENU_PROPERTY_ENV "${PRPPENU_PROPERTY_ENV}"
          check PRPPENU_USER_ENV "${PRPPENU_USER_ENV}"

      # 5Ô∏è‚É£ Write .env files from secrets
      - name: Write gateway .env
        working-directory: backend/gateway
        run: |
          cat > .env <<'EOF'
          ${PRPPENU_GATEWAY_ENV}
          EOF

      - name: Write service .env files
        run: |
          write_env () {
            local content="$1"; local path="$2"
            mkdir -p "$(dirname "$path")"
            printf "%s" "$content" > "$path"
            echo "‚úÖ wrote $path"
          }
          write_env "${PRPPENU_AUTH_ENV}" backend/services/auth-service/.env
          write_env "${PRPPENU_PAYMENT_ENV}" backend/services/payment-service/.env
          write_env "${PRPPENU_PROPERTY_ENV}" backend/services/property-service/.env
          write_env "${PRPPENU_USER_ENV}" backend/services/user-service/.env

      # 6Ô∏è‚É£ Install & build gateway
      - name: Install gateway deps
        working-directory: backend/gateway
        run: npm ci --no-audit --no-fund

      - name: Build gateway
        working-directory: backend/gateway
        run: |
          if npm run | grep -qE '(^|\s)build(\s|:)'; then
            npm run build
          else
            echo "‚ö†Ô∏è No build script for gateway."
          fi

      - name: Prune gateway dev deps
        working-directory: backend/gateway
        run: npm prune --omit=dev

      # 7Ô∏è‚É£ Install & build all services
      - name: Install service deps
        run: |
          for dir in backend/services/*-service; do
            echo "Installing deps in $dir"
            (cd "$dir" && npm ci --no-audit --no-fund)
          done

      - name: Build services
        run: |
          for dir in backend/services/*-service; do
            if (cd "$dir" && npm run | grep -qE '(^|\s)build(\s|:)'); then
              echo "Building $dir"
              (cd "$dir" && npm run build)
            else
              echo "‚ö†Ô∏è No build script in $dir"
            fi
          done

      - name: Prune service dev deps
        run: |
          for dir in backend/services/*-service; do
            (cd "$dir" && npm prune --omit=dev)
          done

      # 8Ô∏è‚É£ PM2 reload
      - name: Reload PM2 apps
        working-directory: backend
        run: |
          if ! command -v pm2 >/dev/null 2>&1; then
            echo "‚ùå PM2 not found. Install: npm i -g pm2"
            exit 1
          fi

          if [ ! -f ecosystem.config.cjs ]; then
            echo "‚ùå Missing ecosystem.config.cjs"
            exit 1
          fi

          echo "üöÄ Reloading PM2..."
          pm2 start ecosystem.config.cjs || true
          pm2 reload ecosystem.config.cjs
          pm2 save
          pm2 status
