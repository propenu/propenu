name: Backend CI/CD 🚀

on:
  push:
    branches: ["deploy"]
    paths:
      - "backend/**"
  pull_request:
    branches: ["deploy"]
    paths:
      - "backend/**"
  workflow_dispatch:

# Prevent overlapping deploy runs
concurrency:
  group: backend-cicd-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    runs-on: self-hosted

    env:
      # Gateway env
      PRPPENU_GATEWAY_ENV: ${{ secrets.PRPPENU_GATEWAY_ENV }}
      # Service envs (stored in GitHub Secrets)
      PRPPENU_AUTH_ENV: ${{ secrets.PRPPENU_AUTH_ENV }}
      PRPPENU_PAYMENT_ENV: ${{ secrets.PRPPENU_PAYMENT_ENV }}
      PRPPENU_PROPERTY_ENV: ${{ secrets.PRPPENU_PROPERTY_ENV }}
      PRPPENU_USER_ENV: ${{ secrets.PRPPENU_USER_ENV }}

    defaults:
      run:
        shell: bash

    strategy:
      matrix:
        node-version: [18.x]

    steps:
      # ----------------- 📥 Checkout -----------------
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: npm
          cache-dependency-path: |
            package-lock.json
            backend/gateway/package-lock.json
            backend/services/*-service/package-lock.json

      - name: Debug working directory
        run: |
          echo "Current directory:"
          pwd
          echo "List of files:"
          ls -la

      # ----------------- 🧪 Write .env files -----------------
      - name: Write gateway .env from secrets
        if: ${{ env.PRPPENU_GATEWAY_ENV != '' }}
        working-directory: backend/gateway
        run: |
          echo "Creating .env for gateway"
          printf "%s" "${PRPPENU_GATEWAY_ENV}" > .env

      - name: Write service .env files from secrets
        run: |
          set -e
          if [ -n "${PRPPENU_AUTH_ENV}" ]; then
            echo "Creating .env for auth-service"
            printf "%s" "${PRPPENU_AUTH_ENV}" > backend/services/auth-service/.env
          fi
          if [ -n "${PRPPENU_PAYMENT_ENV}" ]; then
            echo "Creating .env for payment-service"
            printf "%s" "${PRPPENU_PAYMENT_ENV}" > backend/services/payment-service/.env
          fi
          if [ -n "${PRPPENU_PROPERTY_ENV}" ]; then
            echo "Creating .env for property-service"
            printf "%s" "${PRPPENU_PROPERTY_ENV}" > backend/services/property-service/.env
          fi
          if [ -n "${PRPPENU_USER_ENV}" ]; then
            echo "Creating .env for user-service"
            printf "%s" "${PRPPENU_USER_ENV}" > backend/services/user-service/.env
          fi

      # ----------------- 📦 Install & Build Gateway -----------------
      - name: Install gateway dependencies
        working-directory: backend/gateway
        run: npm ci --no-audit --no-fund

      - name: Build gateway (if script exists)
        working-directory: backend/gateway
        run: |
          if npm run | grep -qE '(^|\s)build(\s|:)'; then
            npm run build
          else
            echo "⚠️ No build script found for gateway."
          fi

      - name: Prune gateway dev dependencies
        working-directory: backend/gateway
        run: npm prune --omit=dev

      # ----------------- 🧰 Install & Build Services -----------------
      - name: Install service dependencies
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            echo "Installing dependencies in $dir"
            (cd "$dir" && npm ci --no-audit --no-fund)
          done

      - name: Build services (if script exists)
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            if (cd "$dir" && npm run | grep -qE '(^|\s)build(\s|:)'); then
              echo "Building $dir"
              (cd "$dir" && npm run build)
            else
              echo "⚠️ No build script in $dir"
            fi
          done

      - name: Prune service dev dependencies
        run: |
          shopt -s nullglob
          for dir in backend/services/*-service; do
            (cd "$dir" && npm prune --omit=dev)
          done

      # ----------------- 🚀 Deploy with PM2 -----------------
      - name: Reload PM2 apps
        working-directory: backend
        run: |
          if ! command -v pm2 &> /dev/null; then
            echo "❌ PM2 not found on runner. Install it: npm i -g pm2"
            exit 1
          fi

          if [ ! -f ecosystem.config.cjs ]; then
            echo "❌ Missing backend/ecosystem.config.cjs — required to deploy."
            exit 1
          fi

          echo "🔁 Starting or reloading PM2 processes..."
          pm2 start ecosystem.config.cjs || true
          pm2 reload ecosystem.config.cjs
          pm2 save
          pm2 status
